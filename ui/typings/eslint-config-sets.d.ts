/** Declaration file generated by dts-gen */

export = eslint_config_sets

declare const eslint_config_sets: {
	egg: {
		env: {
			browser: boolean
			commonjs: boolean
			es6: boolean
			node: boolean
			shelljs: boolean
		}
		extends: string
		globals: {
			h: boolean
		}
		parser: string
		parserOptions: {
			ecmaVersion: number
			parser: string
			sourceType: string
		}
		root: boolean
		rules: {
			'array-bracket-spacing': number[]
			'comma-dangle': string
			indent: number[]
			'no-console': string[]
			'no-debugger': number
			'no-dupe-keys': number
			'no-func-assign': number
			'no-irregular-whitespace': number
			'no-mixed-spaces-and-tabs': number
			'no-new-wrappers': number
			'no-prototype-builtins': number
			'no-redeclare': number
			'no-shadow': number
			'no-tabs': number
			'no-throw-literal': number
			'no-undef': number
			'no-unused-vars': number[]
			'no-useless-escape': number
			'object-shorthand': number
			'one-var': string[]
			'one-var-declaration-per-line': number[]
			'prefer-const': number
			semi: number[]
			'space-before-function-paren': number[]
			strict: string[]
			'valid-typeof': number
		}
	}
	nuxt: {
		env: {
			browser: boolean
			commonjs: boolean
			es6: boolean
			node: boolean
			shelljs: boolean
		}
		extends: string[]
		overrides: {
			files: string[]
			rules: {
				indent: string
			}
		}[]
		parser: string
		parserOptions: {
			parser: string
			sourceType: string
		}
		plugins: string[]
		root: boolean
		rules: {
			'comma-dangle': string
			'jsdoc/check-tag-names': number
			'jsdoc/check-types': number
			'jsdoc/require-returns': number[]
			'no-console': number[]
			'no-debugger': number
			'no-dupe-keys': number
			'no-func-assign': number
			'no-irregular-whitespace': number
			'no-mixed-spaces-and-tabs': number
			'no-new-wrappers': number
			'no-prototype-builtins': number
			'no-redeclare': number
			'no-shadow': number
			'no-tabs': number
			'no-throw-literal': number
			'no-undef': number
			'no-unused-vars': number
			'no-useless-escape': number
			'one-var': string[]
			'prefer-const': number
			semi: number[]
			'space-before-function-paren': number[]
			'valid-typeof': number
			'vue/no-v-html': number
			'vue/require-default-prop': number
		}
	}
	react: {
		env: {
			browser: boolean
			commonjs: boolean
			es6: boolean
			node: boolean
		}
		extends: string[]
		globals: {
			$: boolean
			WeixinJSBridge: boolean
			define: boolean
			h: boolean
			history: boolean
			location: boolean
			process: boolean
			qq: boolean
			window: boolean
			wx: boolean
			wxjs: boolean
		}
		parser: string
		parserOptions: {
			ecmaFeatures: {
				experimentalDecorators: boolean
				experimentalObjectRestSpread: boolean
				jsx: boolean
			}
			ecmaVersion: number
			sourceType: string
		}
		plugins: string[]
		root: boolean
		rules: {
			'comma-dangle': string
			'no-console': string[]
			'no-debugger': number
			'no-dupe-keys': number
			'no-func-assign': number
			'no-irregular-whitespace': number
			'no-mixed-spaces-and-tabs': number
			'no-new-wrappers': number
			'no-prototype-builtins': number
			'no-redeclare': number
			'no-shadow': number
			'no-tabs': number
			'no-throw-literal': number
			'no-undef': number
			'no-unused-vars': number[]
			'no-useless-escape': number
			'object-shorthand': number
			'one-var': string[]
			semi: number[]
			'space-before-function-paren': number[]
			'valid-typeof': number
		}
		settings: {
			react: {
				version: string
			}
		}
	}
	reactTs: {
		env: {
			browser: boolean
			commonjs: boolean
			es6: boolean
			node: boolean
		}
		extends: string[]
		globals: {
			$: boolean
			WeixinJSBridge: boolean
			define: boolean
			h: boolean
			history: boolean
			location: boolean
			process: boolean
			qq: boolean
			window: boolean
			wx: boolean
			wxjs: boolean
		}
		parser: string
		parserOptions: {
			ecmaFeatures: {
				experimentalDecorators: boolean
				experimentalObjectRestSpread: boolean
				jsx: boolean
			}
			ecmaVersion: number
			parser: string
			project: string
			sourceType: string
		}
		plugins: string[]
		root: boolean
		rules: {
			'@typescript-eslint/ban-ts-comment': string
			'@typescript-eslint/ban-ts-ignore': string
			'@typescript-eslint/ban-types': string
			'@typescript-eslint/explicit-function-return-type': string
			'@typescript-eslint/explicit-module-boundary-types': string
			'@typescript-eslint/no-empty-function': string
			'@typescript-eslint/no-explicit-any': string
			'@typescript-eslint/no-non-null-assertion': string
			'@typescript-eslint/no-unused-vars': number[]
			'@typescript-eslint/no-use-before-define': string
			'@typescript-eslint/no-var-requires': number
			'comma-dangle': string
			'no-console': string[]
			'no-debugger': number
			'no-dupe-keys': number
			'no-func-assign': number
			'no-irregular-whitespace': number
			'no-mixed-spaces-and-tabs': number
			'no-new-wrappers': number
			'no-prototype-builtins': number
			'no-redeclare': number
			'no-shadow': number
			'no-tabs': number
			'no-throw-literal': number
			'no-undef': number
			'no-unused-vars': number[]
			'no-use-before-define': string
			'no-useless-escape': number
			'object-shorthand': number
			'one-var': string[]
			quotes: string[]
			semi: number[]
			'space-before-function-paren': number[]
			'valid-typeof': number
			'vue/custom-event-name-casing': string
		}
		settings: {
			react: {
				version: string
			}
		}
	}
	simple: {
		env: {
			browser: boolean
			commonjs: boolean
			es6: boolean
			node: boolean
			shelljs: boolean
		}
		extends: string[]
		parser: string
		parserOptions: {
			ecmaVersion: number
			sourceType: string
		}
		root: boolean
		rules: {
			'comma-dangle': string
			'no-console': string[]
			'no-debugger': number
			'no-dupe-keys': number
			'no-func-assign': number
			'no-irregular-whitespace': number
			'no-mixed-spaces-and-tabs': number
			'no-new-wrappers': number
			'no-prototype-builtins': number
			'no-redeclare': number
			'no-shadow': number
			'no-tabs': number
			'no-throw-literal': number
			'no-undef': number
			'no-unused-vars': number
			'no-useless-escape': number
			'one-var': string[]
			semi: number[]
			'space-before-function-paren': number[]
			'valid-typeof': number
		}
	}
	simpleTs: {
		env: {
			browser: boolean
			commonjs: boolean
			es6: boolean
			node: boolean
			shelljs: boolean
		}
		extends: string[]
		globals: {
			h: boolean
		}
		overrides: {
			env: {
				mocha: boolean
			}
			files: string[]
		}[]
		parser: string
		parserOptions: {
			ecmaFeatures: {
				experimentalDecorators: boolean
				experimentalObjectRestSpread: boolean
				jsx: boolean
			}
			ecmaVersion: number
			parser: string
			sourceType: string
		}
		plugins: string[]
		root: boolean
		rules: {
			'@typescript-eslint/ban-ts-comment': string
			'@typescript-eslint/ban-ts-ignore': string
			'@typescript-eslint/ban-types': string
			'@typescript-eslint/explicit-function-return-type': string
			'@typescript-eslint/explicit-module-boundary-types': string
			'@typescript-eslint/no-empty-function': string
			'@typescript-eslint/no-explicit-any': string
			'@typescript-eslint/no-non-null-assertion': string
			'@typescript-eslint/no-unused-vars': number[]
			'@typescript-eslint/no-use-before-define': string
			'@typescript-eslint/no-var-requires': number
			'comma-dangle': string
			'no-console': string[]
			'no-debugger': number
			'no-dupe-keys': number
			'no-func-assign': number
			'no-irregular-whitespace': number
			'no-mixed-spaces-and-tabs': number
			'no-new-wrappers': number
			'no-prototype-builtins': number
			'no-redeclare': number
			'no-shadow': number
			'no-tabs': number
			'no-throw-literal': number
			'no-undef': number
			'no-unused-vars': number[]
			'no-use-before-define': string
			'no-useless-escape': number
			'object-shorthand': number
			'one-var': string[]
			quotes: string[]
			semi: number[]
			'space-before-function-paren': number[]
			'valid-typeof': number
			'vue/custom-event-name-casing': string
		}
	}
	vue: {
		env: {
			browser: boolean
			commonjs: boolean
			es6: boolean
			node: boolean
		}
		extends: string[]
		overrides: {
			files: string[]
			rules: {
				indent: string
			}
		}[]
		parser: string
		parserOptions: {
			parser: string
			sourceType: string
			vueFeatures: {}
		}
		root: boolean
		rules: {
			'comma-dangle': string
			'no-console': string[]
			'no-debugger': number
			'no-dupe-keys': number
			'no-func-assign': number
			'no-irregular-whitespace': number
			'no-mixed-spaces-and-tabs': number
			'no-new-wrappers': number
			'no-prototype-builtins': number
			'no-redeclare': number
			'no-shadow': number
			'no-tabs': number
			'no-throw-literal': number
			'no-undef': number
			'no-unused-vars': number
			'no-useless-escape': number
			'one-var': string[]
			semi: number[]
			'space-before-function-paren': number[]
			'valid-typeof': number
			'vue-scoped-css/require-scoped': number
			'vue/custom-event-name-casing': number
			'vue/no-use-v-if-with-v-for': number[]
		}
	}
	vue3: {
		env: {
			browser: boolean
			commonjs: boolean
			es6: boolean
			node: boolean
		}
		extends: string[]
		globals: {
			h: boolean
		}
		overrides: {
			files: string[]
			rules: {
				'vue/no-v-model-argument': string
				'vue/valid-v-model': number
			}
		}[]
		parser: string
		parserOptions: {
			ecmaVersion: number
			sourceType: string
		}
		root: boolean
		rules: {
			'comma-dangle': string
			'no-console': string[]
			'no-debugger': number
			'no-dupe-keys': number
			'no-func-assign': number
			'no-irregular-whitespace': number
			'no-mixed-spaces-and-tabs': number
			'no-new-wrappers': number
			'no-prototype-builtins': number
			'no-redeclare': number
			'no-shadow': number
			'no-tabs': number
			'no-throw-literal': number
			'no-undef': number
			'no-unused-vars': number[]
			'no-useless-escape': number
			'object-shorthand': number
			'one-var': string[]
			semi: number[]
			'space-before-function-paren': number[]
			'valid-typeof': number
			'vue-scoped-css/require-scoped': number
			'vue/max-attributes-per-line': number[]
			'vue/no-multiple-template-root': number
			'vue/no-use-v-if-with-v-for': number[]
		}
	}
	vue3Ts: {
		env: {
			browser: boolean
			commonjs: boolean
			es6: boolean
			node: boolean
		}
		extends: string[]
		globals: {
			defineEmits: string
			defineExpose: string
			defineProps: string
			h: boolean
			withDefaults: string
		}
		overrides: {
			env: {
				mocha: boolean
			}
			files: string[]
		}[]
		parser: string
		parserOptions: {
			ecmaFeatures: {
				experimentalDecorators: boolean
				experimentalObjectRestSpread: boolean
				jsx: boolean
			}
			ecmaVersion: number
			parser: string
			sourceType: string
		}
		plugins: string[]
		root: boolean
		rules: {
			'@typescript-eslint/ban-ts-comment': string
			'@typescript-eslint/ban-ts-ignore': string
			'@typescript-eslint/ban-types': string
			'@typescript-eslint/explicit-function-return-type': string
			'@typescript-eslint/explicit-module-boundary-types': string
			'@typescript-eslint/no-empty-function': string
			'@typescript-eslint/no-explicit-any': string
			'@typescript-eslint/no-non-null-assertion': string
			'@typescript-eslint/no-unused-vars': number[]
			'@typescript-eslint/no-use-before-define': string
			'@typescript-eslint/no-var-requires': number
			'comma-dangle': string
			'no-console': string[]
			'no-debugger': number
			'no-dupe-keys': number
			'no-func-assign': number
			'no-irregular-whitespace': number
			'no-mixed-spaces-and-tabs': number
			'no-new-wrappers': number
			'no-prototype-builtins': number
			'no-redeclare': number
			'no-shadow': number
			'no-tabs': number
			'no-throw-literal': number
			'no-undef': number
			'no-unused-vars': number[]
			'no-use-before-define': string
			'no-useless-escape': number
			'object-shorthand': number
			'one-var': string[]
			quotes: string[]
			semi: number[]
			'space-before-function-paren': number[]
			'valid-typeof': number
			'vue-scoped-css/require-scoped': number
			'vue/custom-event-name-casing': string
			'vue/max-attributes-per-line': number[]
			'vue/no-multiple-template-root': number
			'vue/no-use-v-if-with-v-for': number[]
		}
	}
}

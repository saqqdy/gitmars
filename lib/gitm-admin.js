#!/usr/bin/env node
"use strict";const{Command:e}=require("commander"),t=require("shelljs"),{create:i,publish:s,update:a,clean:c}=require("./conf/admin"),g=require("./js/api"),{error:o,success:r,queue:n,getStatus:u,checkBranch:l,getCurrent:p,isGitProject:$}=require("./js/index"),{createArgs:f}=require("./js/tools");$()||(t.echo(o("当前目录不是git项目目录")),t.exit(1));const m=require("./js/getGitConfig"),d=require("./js/getConfig"),{appName:h}=m(),b=d(),{token:x,level:k,nickname:_=""}=b.api?g():{},j=new e;if(i.args.length>0){const e=j.name("gitm admin").usage("<command> <type>").description("创建bugfix、release、develop和support分支").command("create "+f(i.args));i.options.forEach((t=>{e.option(t.flags,t.description,t.defaultValue)})),e.action((async e=>{const i=["bugfix","release","develop","support"],s="release"===e?b.master:b.release,a=u(),c=await l(s),g=await l(b[e]);if(a||t.exit(1),c||(t.echo(o(s+"分支不存在，请先创建"+s+"分支")),t.exit(1)),g&&(t.echo(o(b[e]+"分支已存在，不需要重复创建")),t.exit(1)),i.includes(e)){const i=["git fetch",`git checkout ${s}`,"git pull",`git checkout -b ${b[e]} ${s}`];n(i).then((i=>{0===i[3].code&&t.echo(`${b[e]}分支创建成功，该分支基于${s}创建，您当前已经切换到${b[e]}\n需要发版时，记得执行: ${r("gitm admin publish "+b[e])}`)}))}else t.echo(o("type只允许输入："+i.join(","))),t.exit(1)}))}if(s.args.length>0){const e=j.name("gitm admin").usage("<command> <type>").description("发布bugfix、release、support分支").command("publish "+f(s.args));s.options.forEach((t=>{e.option(t.flags,t.description,t.defaultValue)})),e.action((async(e,i)=>{const s=["bugfix","release","support"],a=u(),c=await p();if(a||t.exit(1),s.includes(e)){const t=!k||k<3?{bugfix:["git fetch",`git checkout ${b.bugfix}`,"git pull",`git checkout ${b.release}`,"git pull",{cmd:`git merge --no-ff ${b.bugfix}`,config:{again:!1,postmsg:i.postmsg,success:`${b.bugfix}合并到${b.release}成功`,fail:`${b.bugfix}合并到${b.release}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}],support:["git fetch",`git checkout ${b.support}`,"git pull",`git checkout ${b.release}`,"git pull",{cmd:`git merge --no-ff ${b.support}`,config:{again:!1,success:`${b.support}合并到${b.release}成功`,fail:`${b.support}合并到${b.release}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${b.bugfix}`,"git pull",{cmd:`git merge --no-ff ${b.support}`,config:{again:!1,success:`${b.support}合并到${b.bugfix}成功`,fail:`${b.support}合并到${b.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}],release:["git fetch",`git checkout ${b.release}`,"git pull",`git checkout ${b.master}`,"git pull",{cmd:`git merge --no-ff ${b.release}`,config:{again:!1,success:`${b.release}合并到${b.master}成功`,fail:`${b.release}合并到${b.master}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]}:{bugfix:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${b.bugfix}\\",\\"target_branch\\":\\"${b.release}\\",\\"private_token\\":\\"${x}\\",\\"title\\":\\"Merge branch '${b.bugfix}' into '${b.release}'\\"}" "${b.gitHost}/api/v4/projects/${b.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${h}项目提交了${b.bugfix}分支合并到${b.release}分支的merge请求"`],support:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${b.support}\\",\\"target_branch\\":\\"${b.release}\\",\\"private_token\\":\\"${x}\\",\\"title\\":\\"Merge branch '${b.support}' into '${b.release}'\\"}" "${b.gitHost}/api/v4/projects/${b.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${h}项目提交了${b.support}分支合并到${b.release}分支的merge请求"`,{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${b.support}\\",\\"target_branch\\":\\"${b.bugfix}\\",\\"private_token\\":\\"${x}\\",\\"title\\":\\"Merge branch '${b.support}' into '${b.bugfix}'\\"}" "${b.gitHost}/api/v4/projects/${b.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${h}项目提交了${b.support}分支合并到${b.bugfix}分支的merge请求"`],release:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${b.release}\\",\\"target_branch\\":\\"${b.master}\\",\\"private_token\\":\\"${x}\\",\\"title\\":\\"Merge branch '${b.release}' into '${b.master}'\\"}" "${b.gitHost}/api/v4/projects/${b.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${h}项目提交了${b.release}分支合并到${b.master}分支的merge请求"`]};let s;for(s in"bugfix"===e&&i.prod&&(t[e]=t[e].concat(!k||k<3?[`git checkout ${b.master}`,"git pull",{cmd:`git merge --no-ff ${b.bugfix}`,config:{again:!1,success:`${b.bugfix}合并到${b.master}成功`,fail:`${b.bugfix}合并到${b.master}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${b.bugfix}\\",\\"target_branch\\":\\"${b.master}\\",\\"private_token\\":\\"${x}\\",\\"title\\":\\"Merge branch '${b.bugfix}' into '${b.master}'\\"}" "${b.gitHost}/api/v4/projects/${b.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${h}项目提交了${b.bugfix}分支合并到${b.master}分支的merge请求"`]),i.build&&(!k||k<3)&&(t[e]=t[e].concat([{cmd:`gitm build ${h} --env bug --app ${!0===i.build?"all":i.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}]))),"release"===e&&i.build&&(!k||k<3)&&(t[e]=t[e].concat([{cmd:`gitm build ${h} --env prod --app ${!0===i.build?"all":i.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}])),"release"===e&&i.combine&&(i.useRebase?t[e]=t[e].concat([`git checkout ${b.release}`,"git pull",`git checkout ${b.bugfix}`,{cmd:`git pull origin ${b.bugfix} --rebase`,config:{again:!0}},{cmd:`git rebase ${b.release}`,config:{again:!1,postmsg:i.postmsg,success:`${b.release}同步到${b.bugfix}成功`,fail:`${b.release}同步到${b.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]):t[e]=t[e].concat(!k||k<3?[`git checkout ${b.release}`,"git pull",`git checkout ${b.bugfix}`,"git pull",{cmd:`git merge --no-ff ${b.release}`,config:{again:!1,postmsg:i.postmsg,success:`${b.release}合并到${b.bugfix}成功`,fail:`${b.release}合并到${b.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${b.release}\\",\\"target_branch\\":\\"${b.bugfix}\\",\\"private_token\\":\\"${x}\\",\\"title\\":\\"Merge branch '${b.release}' into '${b.bugfix}'\\"}" "${b.gitHost}/api/v4/projects/${b.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${h}项目提交了${b.release}分支合并到${b.bugfix}分支的merge请求"`])),t)t[s].push(`git checkout ${c}`);n(t[e])}else t.echo(o("type只允许输入："+s.join(","))),t.exit(1)}))}if(a.args.length>0){const e=j.name("gitm admin").usage("<command> <type> [-m --mode [mode]]").description("更新bugfix、release、support分支代码").command("update "+f(a.args));a.options.forEach((t=>{e.option(t.flags,t.description,t.defaultValue)})),e.action(((e,i)=>{const s=["bugfix","release","support"],a="release"===e?b.master:b.release;let c="";if(u()||t.exit(1),1===i.mode?c=" --strategy-option ours":2===i.mode&&(c=" --strategy-option theirs"),s.includes(e)){let t=!k||k<3?["git fetch",`git checkout ${a}`,"git pull",`git checkout ${b[e]}`,{cmd:"git pull",config:{again:!0}},{cmd:`git merge --no-ff ${a}${c}`,config:{again:!1,postmsg:i.postmsg,success:`${a}同步到${b[e]}成功`,fail:`${a}同步到${b[e]}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${a}\\",\\"target_branch\\":\\"${b[e]}\\",\\"private_token\\":\\"${x}\\",\\"title\\":\\"Merge branch '${a}' into '${b[e]}'\\"}" "${b.gitHost}/api/v4/projects/${b.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${h}项目提交了${a}分支合并到${b[e]}分支的merge请求"`];i.useRebase&&(t=["git fetch",`git checkout ${a}`,"git pull",`git checkout ${b[e]}`,{cmd:`git pull origin ${b[e]} --rebase`,config:{again:!0}},{cmd:`git rebase ${a}`,config:{again:!1,postmsg:i.postmsg,success:`${a}同步到${b[e]}成功`,fail:`${a}同步到${b[e]}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]),n(t)}else t.echo(o("type只允许输入："+s.join(","))),t.exit(1)}))}if(c.args.length>0){const e=j.name("gitm admin").usage("<command> <type>").description("构建清理工作").command("clean "+f(c.args));c.options.forEach((t=>{e.option(t.flags,t.description,t.defaultValue)})),e.action((e=>{const i=["bugfix","release","develop","master"];if(u()||t.exit(1),i.includes(e)){let t=["git fetch","git checkout . -f","git clean -fd",`git checkout ${b.master}`,`git branch -D ${b[e]}`,"git fetch",`git checkout ${b[e]}`,"git pull"];"master"===e&&(t=["git checkout .","git clean -fd",`git checkout ${b.master}`,"git clean -fd","git fetch","git pull"]),n(t)}else t.echo(o("type只允许输入："+i.join(","))),t.exit(1)}))}j.parse(process.argv);

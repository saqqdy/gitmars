#!/usr/bin/env node
"use strict";const{program:e}=require("commander"),i=require("shelljs"),{options:t,args:c}=require("./conf/combine"),{error:s,warning:a,queue:g,getStatus:o,getCurrent:n,searchBranch:r,isGitProject:u}=require("./js/index"),$=require("./js/branch/getIsMergedDevBranch"),l=require("./js/branch/getIsUpdatedInTime"),{createArgs:p}=require("./js/tools"),{defaults:f}=require("./js/global");u()||(i.echo(s("当前目录不是git项目目录")),i.exit(1));const d=require("./js/api"),m=require("./js/getGitConfig"),h=require("./js/getConfig"),{appName:b}=m(),v=h();e.name("gitm combine").usage("[type] [name] [-d --dev] [-p --prod]").description("合并bugfix任务分支、合并feature功能开发分支、合并support分支"),c.length>0&&e.arguments(p(c)),t.forEach((i=>{e.option(i.flags,i.description,i.defaultValue)})),e.action(((e,t,c)=>{return u=void 0,p=null,m=function*(){const u=["bugfix","feature","support"],p=[f.master,f.develop,f.release,f.bugfix,f.support],{token:m,level:h,nickname:x=""}=v.api?d():{},j=!(!c.add&&""===c.commit)||o();if(c.dev||c.prod||(i.echo("请输入需要同步到的环境"),i.exit(1)),j||i.exit(1),!0===c.commit&&(i.echo(s("请输入要提交的message")),i.exit(1)),e){if(!t){u.includes(e)&&(i.echo("请输入分支名称"),i.exit(1));const c=yield r(e);1===c.length?[e,t]=c[0].split("/"):(i.echo(c.length>1?`查询到多条名称包含${e}的分支，请输入分支类型`:s("分支不存在，请正确输入")),i.exit(1))}}else[e,t]=n().split("/"),t||(p.includes(e)&&i.echo(s(`骚年，你在${e}分支执行这个指令是什么骚操作？`)),i.exit(1));if(u.includes(e)&&t){const s="bugfix"===e?v.bugfix:v.release;let o=[];c.add&&(o=o.concat(["git add ."])),c.commit&&(o=o.concat([`git commit -m "${c.commit}"`])),c.dev&&(o=o.concat(["git fetch",`git checkout ${v.develop}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${v.develop}成功`,fail:`${e}/${t}合并到${v.develop}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]),c.build&&(o=o.concat([{cmd:`gitm build ${b} --env dev --app ${!0===c.build?"all":c.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}]))),$(`${e}/${t}`,v.develop)||(i.echo(a(`检测到你的分支没有合并过${v.develop}，请先合并到${v.develop}分支`)),i.exit(0)),l({lastet:"7d",limit:100,branch:s})||i.echo(a("检测到该分支已经超过1周没有同步过主干代码了，请每周至少同步一次，执行：gitm update")),c.prod&&(c.noBugfix||c.asFeature||(o=o.concat(!h||h<3?["git fetch",`git checkout ${s}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${s}成功`,fail:`${e}/${t}合并到${s}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${s}\\",\\"private_token\\":\\"${m}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${s}'\\"}" "${v.gitHost}/api/v4/projects/${v.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${x}在${b}项目提交了${e}/${t}分支合并到${s}分支的merge请求"`])),"bugfix"===e&&c.asFeature&&(o=o.concat(!h||h<3?["git fetch",`git checkout ${v.release}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${v.release}成功`,fail:`${e}/${t}合并到${v.release}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${v.release}\\",\\"private_token\\":\\"${m}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${v.release}'\\"}" "${v.gitHost}/api/v4/projects/${v.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${x}在${b}项目提交了${e}/${t}分支合并到${v.release}分支的merge请求"`])),"support"===e&&c.noBugfix&&(o=o.concat(!h||h<3?["git fetch",`git checkout ${v.bugfix}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${v.bugfix}成功`,fail:`${e}/${t}合并到${v.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${v.bugfix}\\",\\"private_token\\":\\"${m}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${v.bugfix}'\\"}" "${v.gitHost}/api/v4/projects/${v.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${x}在${b}项目提交了${e}/${t}分支合并到${v.bugfix}分支的merge请求"`])),c.build&&(!h||h<3)&&("bugfix"===e&&(o=o.concat([{cmd:`gitm build ${b} --env bug --app ${!0===c.build?"all":c.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}])),"support"===e&&c.noBugfix&&(o=o.concat([{cmd:`gitm build ${b} --env bug --app ${!0===c.build?"all":c.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}])))),g(o)}else i.echo(s("type只允许输入："+JSON.stringify(u))),i.exit(1)},new Promise(((e,i)=>{var t=e=>{try{s(m.next(e))}catch(e){i(e)}},c=e=>{try{s(m.throw(e))}catch(e){i(e)}},s=i=>i.done?e(i.value):Promise.resolve(i.value).then(t,c);s((m=m.apply(u,p)).next())}));var u,p,m})),e.parse(process.argv);

#!/usr/bin/env node
"use strict";const{program:e}=require("commander"),i=require("shelljs"),{options:t,args:c}=require("./conf/combine"),{error:s,queue:a,getStatus:g,getCurrent:o,searchBranch:n,isGitProject:r}=require("./js/index"),{createArgs:u}=require("./js/tools"),{defaults:$}=require("./js/global");r()||(i.echo(s("当前目录不是git项目目录")),i.exit(1));const l=require("./js/api"),f=require("./js/getGitConfig"),p=require("./js/getConfig"),{appName:m}=f(),d=p();e.name("gitm combine").usage("[type] [name] [-d --dev] [-p --prod]").description("合并bugfix任务分支、合并feature功能开发分支、合并support分支"),c.length>0&&e.arguments(u(c)),t.forEach((i=>{e.option(i.flags,i.description,i.defaultValue)})),e.action(((e,t,c)=>{return r=void 0,u=null,f=function*(){const r=["bugfix","feature","support"],u=[$.master,$.develop,$.release,$.bugfix,$.support],{token:f,level:p,nickname:h=""}=d.api?l():{},b=!(!c.add&&""===c.commit)||g();if(c.dev||c.prod||(i.echo("请输入需要同步到的环境"),i.exit(1)),b||i.exit(1),!0===c.commit&&(i.echo(s("请输入要提交的message")),i.exit(1)),e){if(!t){r.includes(e)&&(i.echo("请输入分支名称"),i.exit(1));const c=yield n(e);1===c.length?[e,t]=c[0].split("/"):(i.echo(c.length>1?`查询到多条名称包含${e}的分支，请输入分支类型`:s("分支不存在，请正确输入")),i.exit(1))}}else[e,t]=o().split("/"),t||(u.includes(e)&&i.echo(s(`骚年，你在${e}分支执行这个指令是什么骚操作？`)),i.exit(1));if(r.includes(e)&&t){const i="bugfix"===e?d.bugfix:d.release;let s=[];c.add&&(s=s.concat(["git add ."])),c.commit&&(s=s.concat([`git commit -m "${c.commit}"`])),c.dev&&(s=s.concat(["git fetch",`git checkout ${d.develop}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${d.develop}成功`,fail:`${e}/${t}合并到${d.develop}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]),c.build&&(s=s.concat([{cmd:`gitm build ${m} --env dev --app ${!0===c.build?"all":c.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}]))),c.prod&&(c.noBugfix||c.asFeature||(s=s.concat(!p||p<3?["git fetch",`git checkout ${i}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${i}成功`,fail:`${e}/${t}合并到${i}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${i}\\",\\"private_token\\":\\"${f}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${i}'\\"}" "${d.gitHost}/api/v4/projects/${d.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${h}在${m}项目提交了${e}/${t}分支合并到${i}分支的merge请求"`])),"bugfix"===e&&c.asFeature&&(s=s.concat(!p||p<3?["git fetch",`git checkout ${d.release}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${d.release}成功`,fail:`${e}/${t}合并到${d.release}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${d.release}\\",\\"private_token\\":\\"${f}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${d.release}'\\"}" "${d.gitHost}/api/v4/projects/${d.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${h}在${m}项目提交了${e}/${t}分支合并到${d.release}分支的merge请求"`])),"support"===e&&c.noBugfix&&(s=s.concat(!p||p<3?["git fetch",`git checkout ${d.bugfix}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${d.bugfix}成功`,fail:`${e}/${t}合并到${d.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${d.bugfix}\\",\\"private_token\\":\\"${f}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${d.bugfix}'\\"}" "${d.gitHost}/api/v4/projects/${d.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${h}在${m}项目提交了${e}/${t}分支合并到${d.bugfix}分支的merge请求"`])),c.build&&(!p||p<3)&&("bugfix"===e&&(s=s.concat([{cmd:`gitm build ${m} --env bug --app ${!0===c.build?"all":c.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}])),"support"===e&&c.noBugfix&&(s=s.concat([{cmd:`gitm build ${m} --env bug --app ${!0===c.build?"all":c.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}])))),a(s)}else i.echo(s("type只允许输入："+JSON.stringify(r))),i.exit(1)},new Promise(((e,i)=>{var t=e=>{try{s(f.next(e))}catch(e){i(e)}},c=e=>{try{s(f.throw(e))}catch(e){i(e)}},s=i=>i.done?e(i.value):Promise.resolve(i.value).then(t,c);s((f=f.apply(r,u)).next())}));var r,u,f})),e.parse(process.argv);

"use strict";const e=require("fs"),t=require("shelljs"),s=require("colors"),n=require("./getGitConfig"),r=require("./gitRevParse"),c=require("./getConfig");function a(e){return s.yellow(e)}function i(e){return s.red(e)}function o(e){return s.green(e)}function l(e,t){if(!e||!t)return null;return""+e.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,s)=>{if("function"==typeof t)return t(s);for(const e in t)if(s===e)return t[e]}))}function u(e){const t=String(e).match(/^(\d+)([a-zA-Z]+)$/);let s;if(!t)return null;switch(s=+t[1],t[2]){case"m":s*=60;break;case"h":s*=3600;break;case"d":s*=86400;break;case"w":s*=604800;break;case"M":s*=2592e3;break;case"y":s*=31536e3}return parseInt(String(Date.now()/1e3-s))}function g(e,t){0!==e.length?t(e[0],((s=!1)=>{s||(e.shift(),g(e,t))})):t()}function f(e){return new Promise(((s,n)=>{const r=[];0===e.length&&n("指令名称不能为空"),g(e=JSON.parse(JSON.stringify(e)),((n,c)=>{let l={silent:!0,postmsg:!1,kill:!0,again:!1},u=n;n instanceof Object&&(l=Object.assign(l,n.config||{}),u=n.cmd),u?t.exec(u,l,((s,g,f)=>{const m=k(u);try{g=JSON.parse(g)}catch(e){g=g.replace(/\n*$/g,"")}if(r.push({code:s,out:g,err:f,cfg:l,cmd:u}),0!==s&&p({command:n,code:s,out:g,err:f}),0!==s&&l.kill){const s=JSON.parse(JSON.stringify(e));l.again?!0!==l.again&&s.splice(0,1,l.again):s.shift(),c&&c(!0),h(s),l.silent&&t.echo(i(f)),t.echo(i(l.fail||m.fail||"出错了！指令 "+u+" 执行失败，中断了进程")),l.postmsg&&d("出错了！指令 "+u+" 执行失败，中断了进程"),s.length>0&&t.echo(i("请处理相关问题之后输入gitm continue继续")),t.exit(1)}else{if(0===s){const e=l.success||m.success;e&&(t.echo(o(e)),l.postmsg&&d(e))}else{const e=l.fail||m.fail||"指令 "+u+" 执行失败";e&&t.echo(a(e))}c&&c()}})):s(r)}))}))}function h(e){const{gitDir:s}=r();t.touch(s+"/.gitmarscommands"),t.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),s+"/.gitmarscommands")}function p(e){const{gitDir:s}=r();t.touch(s+"/.gitmarslog"),t.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),s+"/.gitmarslog")}function m(e={}){const{silent:s=!0}=e,n=t.exec("git status -s --no-column",{silent:s}).stdout.replace(/(^\s+|\n*$)/g,""),r=n?n.replace(/\n(\s+)/g,"\n").split("\n"):[],c={A:[],D:[],M:[],"??":[]};return 0===r.length||r.forEach((e=>{const t=e.trim().replace(/\s+/g," ").split(" "),s=t.splice(0,1)[0];c[s]||(c[s]=[]),c[s].push(t.join(" "))})),c}function d(e=""){const s=c();if(!s.msgTemplate)return void t.echo(i("请配置消息发送api模板地址"));const a=l(s.msgTemplate,(t=>"message"===t?e:function(e){const{root:t}=r(),{appName:s}=n(),a=c(),i=new Date;let o="";switch(e){case"time":o=i.toLocaleString();break;case"timeNum":o=String(i.getTime());break;case"pwd":o=t;break;case"project":o=s;break;case"user":o=a.user}return o}(t)));s.msgUrl&&a&&b(a)}function b(e="",s={}){const n=c(),{silent:r=!0}=s;n.msgUrl?(e=e.replace(/\s/g,""),n.msgUrl&&t.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${n.msgUrl}"`,{silent:r})):t.echo(i("请配置消息推送地址"))}function k(e){const t={},s=e.replace(/[\s]+/g," ").split(" ");if(s.length<2||"git"!==s[0])return t;switch(s[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}module.exports={warning:a,error:i,success:o,writeFile:function(t,s){return new Promise(((n,r)=>{e.writeFile(t,s,(e=>{e?r(new Error("文件写入错误")):n(!0)}))}))},mapTemplate:l,getSeconds:u,wait:g,queue:f,getCache:function(){const{gitDir:e}=r();let s=[];return t.test("-f",e+"/.gitmarscommands")&&(s=t.cat(e+"/.gitmarscommands").stdout.split("\n")[0].replace(/(^\n*)|(\n*$)/g,"").replace(/\n{2,}/g,"\n").replace(/\r/g,""),s=JSON.parse(decodeURIComponent(s))),s},setCache:h,setLog:p,getStatusInfo:m,getStatus:function(){const e=m({silent:!1});return e.A.length>0||e.D.length>0||e.M.length>0?(t.echo(i("您还有未提交的文件，请处理后再继续")+"\n如果需要暂存文件请执行: gitm save\n恢复时执行：gitm get"),t.exit(1),!1):(e["??"].length>0&&t.echo(a("您有未加入版本的文件,")+"\n如果需要暂存文件请执行: gitm save --force\n恢复时执行：gitm get"),!0)},getLogs:function(e={}){const{lastet:s,limit:n,branches:r}=e,c=["%H","%T","%P","%an","%ae","%al","%aL","%ad","%ar","%at","%aI","%as","%cn","%ce","%cl","%cL","%cd","%cr","%ct","%cI","%cs","%d","%D","%S","%e","%s"],a=t.exec(`git log${n?' -"'+n+'"':""}${s?' --since="'+u(s)+'"':""}${r?' --branches="*'+r+'"':""} --date-order --pretty=format:"${c.join(",=")}-end-"`,{silent:!0}).stdout.replace(/[\r\n]+/g,"").replace(/-end-$/,""),i=[];return a&&a.split("-end-").forEach((e=>{const t=e.split(",="),s={};c.forEach(((e,n)=>{s[e]=t[n]})),i.push(s)})),i},checkBranch:async function(e){return(await f([`gitm branch -k ${e}`]))[0].out.replace(/^\s+/,"")},getCurrent:function(){return t.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,"")},searchBranch:async function(e,t,s=!1){const n=(await f([`gitm branch${e?" -k "+e:""}${t?" -t "+t:""}${s?" -r":""}`]))[0].out.replace(/^\*\s+/,"");let r=n?n.split("\n"):[];return r=r.map((e=>e.trim())),r},searchBranchs:function(e={}){const{key:s,type:n,remote:r=!1}=e;let{path:c}=e;c||(c=t.pwd().stdout);const a=t.exec(`git ls-remote${r?" --refs":" --heads"} --quiet --sort="version:refname" ${c}`,{silent:!0}).stdout.replace(/\n*$/g,""),i=a?a.split("\n"):[],o={heads:[],tags:[],others:[]};for(const e of i){const t=e.match(/^\w+[\s]+refs\/(heads|remotes|tags)\/([\w-\/]+)$/);if(t)switch(t[1]){case"heads":case"remotes":o.heads.push(t[2]);break;case"tags":o.tags.push(t[2]);break;default:o.others.push(t[2])}}return n&&["bugfix","feature","support"].includes(n)&&(o.heads=o.heads.filter((e=>e.indexOf("/"+n+"/")>-1))),s&&(o.heads=o.heads.filter((e=>e.indexOf(s)>-1))),o.heads},filterBranch:function(e,s,n=!1){let r,c=[s];"string"==typeof s&&(c=s.split(","));const a=t.exec("git branch"+(n?" -a":""),{silent:!0}).stdout.replace(/(^\s+|[\n\r]*$)/g,"").replace(/\*\s+/,"");return r=a?a.replace(/\n(\s+)/g,"\n").split("\n"):[],r=r.filter((t=>{let s=!0;if(e&&!t.includes(e)&&(s=!1),s&&c.length>0){s=!1;e:for(const e of c)if(t.includes(e)){s=!0;break e}}return s})),r},getStashList:async function(e){const s=(await f(["git stash list"]))[0].out.replace(/^\*\s+/,""),n=s&&s.split("\n")||[],r=[];n.length>10&&t.echo(a(`该项目下一共有${n.length}条暂存记录，建议定期清理！`));try{n.forEach((t=>{const s=t.split(":"),n=s.shift();if(!e||e&&e===s[s.length-1].trim()){const e=n.match(/^stash@\{(\d+)\}$/);s.length>1&&s.shift(),r.push({key:n,index:e?+e[1]:0,msg:s.join(":").trim()})}}))}catch(e){}return r},postMessage:d,sendMessage:b,getCommandMessage:k,compareVersion:function(e,t){if(null===e)return null;e+=".",t+=".";const s=parseFloat(e),n=parseFloat(t),r=parseFloat(e.replace(s+".",""))||0,c=parseFloat(t.replace(n+".",""))||0;return!(n>s)&&(n<s||r>=c)},getBranchsFromID:function(e,s=!1){const n=t.exec(`git branch ${s?"-r":""} --contains ${e} --format="%(refname:short)`,{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"");return n?n.split("\n"):[]},getGitUser:function(){return t.exec("git config user.name",{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"")},getGitEmail:function(){return t.exec("git config user.email",{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"")},isGitProject:function(){return t.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")}};

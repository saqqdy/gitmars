#!/usr/bin/env node
"use strict";const{program:e}=require("commander"),o=require("shelljs"),{options:s,args:n}=require("./conf/hook"),{error:i,success:r,getCurrent:t,getBranchsFromID:c,isGitProject:l}=require("./js/index"),{createArgs:a}=require("./js/tools"),{init:g,remove:u,getIsMergedBranch:p,getIsUpdatedInTime:d,getIsMergeAction:f,getBehandLogs:v}=require("./js/hook/index");l()||(o.echo(i("当前目录不是git项目目录")),o.exit(1));const h=require("./js/getConfig")();e.name("gitm hook").usage("[command]").description("git hook钩子"),n.length>0&&e.arguments(a(n)),s.forEach((o=>{e.option(o.flags,o.description,o.defaultValue)})),e.action(((e,s,n)=>{return l=void 0,a=null,m=function*(){if(console.log("gitmars hooks is running"),n.noVerify)o.exit(0);else{if("init"===e)g();else if("remove"===e)u();else{const e=n.type?n.type.split(","):[],s=[h.master,h.develop,h.release,h.support,h.bugfix],l=t();if(console.log(e,process.env,process.argv,c("2080d17e")),l!==h.develop&&s.includes(l)&&e.includes("1")){const[e,s]=process.env.GIT_REFLOG_ACTION?process.env.GIT_REFLOG_ACTION.split(" "):[];"merge"===e&&(p(s,h.develop)?console.info(r(s+"合并过"+h.develop)):(console.info(i("检测到你的分支没有合并过"+h.develop)),o.exit(0)))}if(s.includes(l)&&e.includes("2")){const[e,s]=process.env.GIT_REFLOG_ACTION?process.env.GIT_REFLOG_ACTION.split(" "):[],t=s.split("/")[0];"merge"===e&&(d({latest:n.latest,branch:s})?console.info(r(s+"一周内同步过主干分支代码")):(console.info(i("检测到你1周内没有同步过主干"+t+"分支代码")),o.exit(0)))}s.includes(l)&&e.includes("3")&&(f()?console.info(r("最后一条记录是merge记录")):(console.info(i("检测到你直接在主干分支修改代码")),o.exit(0))),s.includes(l)&&e.includes("4")&&(v().length?console.info(r("本地版本没有落后远程，可直接push")):(console.info("你本地分支版本落后于远程分支，请先执行pull"),o.exit(0)))}o.exit(0)}},new Promise(((e,o)=>{var s=e=>{try{i(m.next(e))}catch(e){o(e)}},n=e=>{try{i(m.throw(e))}catch(e){o(e)}},i=o=>o.done?e(o.value):Promise.resolve(o.value).then(s,n);i((m=m.apply(l,a)).next())}));var l,a,m})),e.parse(process.argv);

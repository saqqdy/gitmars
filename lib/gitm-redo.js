#!/usr/bin/env node
"use strict";const{program:e}=require("commander"),r=require("inquirer"),t=require("shelljs"),{options:o,args:c}=require("./conf/redo"),{error:s,warning:a,queue:i,isGitProject:n}=require("./js/index"),{createArgs:m}=require("./js/tools");n()||(t.echo(s("当前目录不是git项目目录")),t.exit(1)),e.name("gitm redo").usage("[commitid...] [-b --branch [branch]] [-m --mode [mode]]").description("撤销一次提交记录"),c.length>0&&e.arguments(m(c)),o.forEach((r=>{e.option(r.flags,r.description,r.defaultValue)})),e.action(((e,o)=>{return c=void 0,s=null,n=function*(){const c=[];let s="";if(o.mode&&(s=" -m "+Math.abs(Number(o.mode))),o.branch){const e=["%H","%aI","%an"],a=t.exec(`git log --merges --grep="'${o.branch}'" --date-order --pretty=format:"${e.join(",=")}-end-"`,{silent:!0}).stdout.replace(/[\r\n]+/g,"").replace(/-end-$/,""),i=[];let n=i.map((e=>e["%H"]));if(a&&a.split("-end-").forEach((r=>{const t=r.split(",="),o={};e.forEach(((e,r)=>{o[e]=t[r]})),i.push(o)})),i.reverse(),i.length>1){const e={type:"checkbox",message:"检测到存在多条记录，请选择要撤销的项",name:"commitIDs",choices:[]};i.forEach((r=>{e.choices.push({name:`${r["%an"]}操作于：${r["%aI"]}`,value:r["%H"],checked:!0})}));const{commitIDs:t}=yield r.prompt(e);n=t}n.forEach((e=>{c.push({cmd:`git revert ${e}${s}`,config:{again:!0,success:"撤销成功",fail:"出错了，请根据提示处理"}})}))}else e?c.push({cmd:`git revert ${e}${s}`,config:{again:!0,success:"撤销成功",fail:"出错了，请根据提示处理"}}):(t.echo(a("指令不合法")),t.exit(1));i(c)},new Promise(((e,r)=>{var t=e=>{try{a(n.next(e))}catch(e){r(e)}},o=e=>{try{a(n.throw(e))}catch(e){r(e)}},a=r=>r.done?e(r.value):Promise.resolve(r.value).then(t,o);a((n=n.apply(c,s)).next())}));var c,s,n})),e.parse(process.argv);

#!/usr/bin/env node
"use strict";const{program:e}=require("commander"),t=require("shelljs"),{options:r,args:s}=require("./conf/branch"),{error:i,queue:o,isGitProject:n}=require("./js/index"),{createArgs:a}=require("./js/tools");n()||(t.echo(i("当前目录不是git项目目录")),t.exit(1)),e.name("gitm branch").usage("[-k --key [keyword]] [-t --type [type]] [-d --delete [branch]] [-r --remote [remote]] [-D --forcedelete [branch]]").description("分支查询、删除（注意该指令不用于创建分支，如需创建分支请走start流程）"),s.length>0&&e.arguments(a(s)),r.forEach((t=>{e.option(t.flags,t.description,t.defaultValue)})),e.action((e=>{const r=[];if(e.delete){const s=t.exec(`git rev-parse --verify ${e.delete}`,{silent:!0}).stdout.replace(/\s+$/g,"");/^[a-z0-9]+$/.test(s)&&r.push(`git branch -d ${e.delete}`),e.remote&&r.push(`git push origin --delete ${e.delete}`)}else if(e.forcedelete){const s=t.exec(`git rev-parse --verify ${e.delete}`,{silent:!0}).stdout.replace(/\s+$/g,"");/^[a-z0-9]+$/.test(s)&&r.push(`git branch -D ${e.forcedelete}`),e.remote&&r.push(`git push origin --delete ${e.delete}`)}else{if(!e.upstream)return r.push("git branch -a"),void o(r).then((r=>{r.forEach(((r,s)=>{if(0===s&&0===r.code){let s=r.out&&"string"==typeof r.out&&r.out.split("\n")||[];s=s.filter((t=>{let r=!0;return e.key&&(r=r&&t.indexOf(e.key)>-1),e.type&&(r=r&&t.indexOf(e.type)>-1),r=e.remote?r&&t.indexOf("remotes/origin")>-1:r&&-1===t.indexOf("remotes/origin"),r})),t.echo(s.join("\n"))}}))}));"string"==typeof e.upstream?r.push(`git branch --set-upstream-to origin/${e.upstream}`):r.push("git branch --unset-upstream")}o(r)})),e.parse(process.argv);
